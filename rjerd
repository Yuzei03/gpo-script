--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
-- Initialization
local cloneref = cloneref or function(...) return ... end

local Players = cloneref(game:GetService("Players"))
local lp = Players.LocalPlayer

local flying = false
local bv, bav
local buttons = {W = false, S = false, A = false, D = false, Moving = false}

local function StartFly()
    if not lp.Character then return end
    local c = lp.Character
    local h = c:FindFirstChildOfClass("Humanoid")
    if not h or flying then return end

    h.PlatformStand = true
    local cam = workspace.CurrentCamera

    bv = Instance.new("BodyVelocity")
    bav = Instance.new("BodyAngularVelocity")

    bv.Velocity, bv.MaxForce, bv.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
    bav.AngularVelocity, bav.MaxTorque, bav.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
    bv.Parent = c.Head
    bav.Parent = c.Head

    flying = true

    h.Died:connect(function() 
        EndFly()
    end)
end

local function EndFly()
    if bv then bv:Destroy() end
    if bav then bav:Destroy() end

    local c = lp.Character
    local h = c and c:FindFirstChildOfClass("Humanoid")
    if h then h.PlatformStand = false end

    flying = false
end

game:GetService("UserInputService").InputBegan:connect(function(input, GPE)
    if GPE then return end
    
    if input.KeyCode == Enum.KeyCode.F then
        if flying then
            EndFly()
        else
            StartFly()
        end
    else
        for i, e in pairs(buttons) do
            if i ~= "Moving" and input.KeyCode == Enum.KeyCode[i] then
                buttons[i] = true
                buttons.Moving = true
            end
        end
    end
end)

game:GetService("UserInputService").InputEnded:connect(function(input, GPE)
    if GPE then return end
    local a = false
    for i, e in pairs(buttons) do
        if i ~= "Moving" then
            if input.KeyCode == Enum.KeyCode[i] then
                buttons[i] = false
            end
            if buttons[i] then a = true end
        end
    end
    buttons.Moving = a
end)

local function setVec(vec)
    return vec * ((getgenv().FlySpeed or 50) / vec.Magnitude)
end

game:GetService("RunService").Heartbeat:connect(function(step)
    local c = cloneref(lp.Character)
    if flying and c and c.PrimaryPart then
        local p = c.PrimaryPart.Position
        local cf = workspace.CurrentCamera.CFrame
        local ax, ay, az = cf:toEulerAnglesXYZ()
        c:SetPrimaryPartCFrame(CFrame.new(p.x, p.y, p.z) * CFrame.Angles(ax, ay, az))
        if buttons.Moving then
            local t = Vector3.new()
            if buttons.W then t = t + (setVec(cf.lookVector)) end
            if buttons.S then t = t - (setVec(cf.lookVector)) end
            if buttons.A then t = t - (setVec(cf.rightVector)) end
            if buttons.D then t = t + (setVec(cf.rightVector)) end
            c:TranslateBy(t * step)
        end
    end
end)

-- Load Linoria library and addons
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/Library.lua"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua"))()

-- Create the main window
local Window = Library:CreateWindow({
    Title = 'GPO BR',
    Center = true,
    AutoShow = true,
})

-- Create a tab named "GPO BR"
local GPOTab = Window:AddTab('GPO BR')

-- Add a tabbox for speed settings within the "GPO BR" tab
local SpeedTabbox = GPOTab:AddLeftTabbox('Speed')

-- Add a tab to the tabbox for speed settings
local SpeedTab = SpeedTabbox:AddTab('Speed Settings')

-- Add a textbox to enter speed
local SpeedInput = SpeedTab:AddInput('SpeedInput', {
    Default = '16',
    Numeric = true,
    Finished = false,
    Text = 'Enter Speed',
    Tooltip = 'Set your character speed',
})

-- Add a button to apply speed
SpeedTab:AddButton('Apply Speed', function()
    local speed = SpeedInput.Value
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.WalkSpeed = tonumber(speed)

    -- Persist the speed in a global variable
    _G.WalkSpeed = tonumber(speed)
end)

-- Create a small button to show the GUI when it's hidden
local ShowButton

-- Function to hide the main GUI and show the small button
local function hideMainGUI()
    Library:Unload()
    if not ShowButton then
        ShowButton = Instance.new("TextButton")
        ShowButton.Size = UDim2.new(0, 100, 0, 30)
        ShowButton.Position = UDim2.new(0, 10, 0, 10)
        ShowButton.Text = "Show GUI"
        ShowButton.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
        ShowButton.MouseButton1Click:Connect(function()
            ShowButton:Destroy()
            ShowButton = nil
            loadstring(game:HttpGet('https://raw.githubusercontent.com/your-username/your-repo/main/your-script.lua'))()
        end)
    end
end

-- Add a button to hide the GUI
SpeedTab:AddButton('Hide GUI', hideMainGUI)

-- Add a tabbox for hitbox settings
local HitboxTabbox = GPOTab:AddLeftTabbox('Hitbox')

-- Add a tab to the hitbox tabbox for hitbox settings
local HitboxTab = HitboxTabbox:AddTab('Hitbox Settings')

-- Add a textbox to enter hitbox size
local HitboxInput = HitboxTab:AddInput('HitboxInput', {
    Default = '5',
    Numeric = true,
    Finished = false,
    Text = 'Enter Hitbox Size',
    Tooltip = 'Set the hitbox size for other players',
})

-- Add a button to apply hitbox size and render through walls
HitboxTab:AddButton('Apply Hitbox (ESP)', function()
    local size = HitboxInput.Value
    _G.HeadSize = tonumber(size)
    for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
        if player.Name ~= game.Players.LocalPlayer.Name then
            pcall(function()
                local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    rootPart.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
                    rootPart.Transparency = 0.7
                    rootPart.BrickColor = BrickColor.new("Really blue")
                    rootPart.Material = "Neon"
                    rootPart.CanCollide = false
                end
            end)
        end
    end
end)

-- Add a tabbox for ESP settings
local ESPTabbox = GPOTab:AddRightTabbox('ESP')

-- Add a tab to the ESP tabbox for ESP settings
local ESPTab = ESPTabbox:AddTab('ESP Settings')

-- Add a toggle to enable/disable ESP
local EnableESP = ESPTab:AddToggle('EnableESP', {
    Text = 'Enable ESP',
    Default = false,
    Tooltip = 'Toggle ESP to locate players',
})

-- Function to create ESP for players
local function createESP(player)
    if player.Character and not player.Character:FindFirstChild("ESPBox") then
        local box = Instance.new("BoxHandleAdornment")
        box.Name = "ESPBox"
        box.Adornee = player.Character:WaitForChild("HumanoidRootPart")
        box.AlwaysOnTop = true
        box.ZIndex = 5
        box.Size = player.Character.HumanoidRootPart.Size + Vector3.new(1, 1, 1)
        box.Transparency = 0.7
        box.Color3 = Color3.new(1, 0, 0) -- Red color
        box.Parent = player.Character.HumanoidRootPart
    end
end

-- Function to remove ESP from players
local function removeESP(player)
    if player.Character and player.Character:FindFirstChild("ESPBox") then
        player.Character:FindFirstChild("ESPBox"):Destroy()
    end
end

-- Toggle ESP functionality
EnableESP:OnChanged(function()
    if EnableESP.Value then
        for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                createESP(player)
            end
        end
        game:GetService('Players').PlayerAdded:Connect(function(player)
            if player ~= game.Players.LocalPlayer then
                player.CharacterAdded:Connect(function()
                    createESP(player)
                end)
            end
        end)
    else
        for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                removeESP(player)
            end
        end
    end
end)

-- Replace ESP functionality with rendering through walls
_G.HeadSize = 5
_G.Disabled = true

game:GetService('RunService').RenderStepped:Connect(function()
    if _G.Disabled then
        for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
            if player.Name ~= game:GetService('Players').LocalPlayer.Name then
                pcall(function()
                    local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                    if rootPart then
                        rootPart.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
                        rootPart.Transparency = 0.7
                        rootPart.BrickColor = BrickColor.new("Really blue")
                        rootPart.Material = "Neon"
                        rootPart.CanCollide = false
                    end
                end)
            end
        end
    end
end)

-- Add a tabbox for Fly settings
local FlyTabbox = GPOTab:AddRightTabbox('Fly')

-- Add a tab to the Fly tabbox for Fly settings
local FlyTab = FlyTabbox:AddTab('Fly Settings')

-- Add a toggle to enable/disable flying
local EnableFly = FlyTab:AddToggle('EnableFly', {
    Text = 'F To Fly',
    Default = false,
    Tooltip = 'Toggle flying ability',
})

-- Add a slider to adjust fly speed
local FlySpeedSlider = FlyTab:AddSlider('FlySpeedSlider', {
    Text = 'Fly Speed',
    Min = 1,
    Max = 100,
    Default = 50,
    Precision = 0,
    Tooltip = 'Adjust flying speed',
})

-- Flying related variables and functions
local flyEnabled = false
local flySpeed = 50

local function startFlying()
    if flyEnabled then
        return
    end
    
    local character = game.Players.LocalPlayer.Character
    if not character then
        return
    end
    
    local humanoid = character:WaitForChild("Humanoid")
    if not humanoid then
        return
    end
    
    humanoid.PlatformStand = true
    
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyVelocity.Parent = character.HumanoidRootPart
    
    flyEnabled = true
    
    -- Handle character death to end flying
    humanoid.Died:Connect(function()
        endFlying()
    end)
    
    while flyEnabled do
        local forward = character.HumanoidRootPart.CFrame.LookVector
        local right = character.HumanoidRootPart.CFrame.RightVector
        local up = character.HumanoidRootPart.CFrame.UpVector

        local moveDirection = Vector3.new()

        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + forward
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - forward
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - right
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + right
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + up
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDirection = moveDirection - up
        end

        bodyVelocity.Velocity = moveDirection.unit * flySpeed
        wait(0.1)
    end
end

local function endFlying()
    if not flyEnabled then
        return
    end
    
    flyEnabled = false
    
    local character = game.Players.LocalPlayer.Character
    if not character then
        return
    end
    
    local humanoid = character:WaitForChild("Humanoid")
    if not humanoid then
        return
    end
    
    humanoid.PlatformStand = false
    
    local bodyVelocity = character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity")
    if bodyVelocity then
        bodyVelocity:Destroy()
    end
end

-- Toggle flying on/off
EnableFly:OnChanged(function(enabled)
    if enabled then
        startFlying()
    else
        endFlying()
    end
end)

-- Update fly speed
FlySpeedSlider:OnChanged(function(value)
    flySpeed = value
end)

-- Hook into UserInputService to handle flying toggle
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.F then
            EnableFly:Set(not EnableFly:Get())
        end
    end
end)

-- Show initializing message
Library:CreateNotification('Initializing', {
    'Welcome to GPO BR',
    'Hello, ' .. game.Players.LocalPlayer.Name,
    'Starting ...',
})

-- Function to show GUI when 'H' is pressed
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.H then
        if Library:IsLoaded() then
            Library:Unload()
        else
            Window:Show()
        end
    end
end)
